#
# Be aware that even a small syntax error here can lead to failures in output.
#

sidebar:
    about: False # set to False or comment line if you want to remove the "how to use?" in the sidebar
    education: False # set to False if you want education in main section instead of in sidebar

    # Profile information
    name: Arseniy Zaostrovnykh 
    tagline: Computer Scientist
    avatar: profile.jpg  #place a 100x100 picture inside /assets/images/ folder and provide the name of the file below

    # Sidebar links
    email:
      user: arseniy.zaostrovnykh
      domain: epfl.ch
    cv:
      short: assets/documents/CV/arseniy-zaostrovnykh-cv-short.pdf
      long: assets/documents/CV/arseniy-zaostrovnykh-cv.pdf
    address:
      text: INN 331, Station 14, 1015 Lausanne, EPFL, Switzerland
      link: https://plan.epfl.ch/?room==INN%20331
    #phone: 012 345 6789
    website: necto.github.com
    linkedin: necto
    github: necto 
    #gitlab:
    #bitbucket:
    twitter: '@azaostro'
    stack-overflow: 1234026/necto
    #codewars:
    #goodreads: # Number-Username, e.g. 123456-alandoe
    google-scholar: h7fTsTQAAAAJ

    languages:
      - idiom: Russian
        level: Native

      - idiom: English
        level: Professional

      - idiom: French
        level: Casual

      - idiom: German
        level: Beginner

    interests:
      - item: Programming Languages
        link:

      - item: Dependability
        link:

      - item: Formal Methods
        link:

      - item: Computer Networks
        link:

      - item: Sports & Music
        link:

career-profile:
    #title: Career Profile
    summary: |
      I am a doctoral student in [DSLAB](https://dslab.epfl.ch) and [NAL](https://nal.epfl.ch)
      at [EPFL](epfl.ch). I lead the [Vigor](https://vigor.github.com) project, that makes it
      possible to apply formal verification to real applications for common software
      developers.

      I am most interested in programming languages, code transformation, computer systems, and formal methods.

education:
    - degree: PhD student in Computer Science (ongoing)
      university: École Polytechnique Fédérale de Lausanne (EPFL)
      time: 2014 - present
      details: |
        I make formal software verification practical in the
        domain of network functions (used in middleboxes).

#        GPA 5.5 out of 6

    - degree: MSc in Applied Physics and Mathematics
      university: Moscow Institute of Physics and Technology (MIPT)
      time: 2012 - 2014
      details: |
        I specialized in software engineering and PL systems at the
        Department of Radioelectronics and Cybernetics.
        During the studies, I lectured and lead practical groups in
        compiler construction class for junior students.

        Graduation with honors.

    - degree: BSc in Applied Physics and Mathematics
      university: Moscow Institute of Physics and Technology (MIPT)
      time: 2008 - 2012
      details: |
        Graduation with honors, top 1% of the class. GPA **5.0** out of 5

experiences:
    - role: Research Assistant
      time: Sep 2014 - Present
      company: EPFL, Lausanne, VD Switzerland
      details: |
        I lead the [Vigor](https://vigor-nf.github.io) project. It enables regular developers
        of software [network functions](https://www.sdxcentral.com/term/network-function/)
        to apply formal verification to their applications.
        A core team of 6 people (doctoral students, professors and a postdoc)
        contributes to the project on a permanent basis, and more than
        10 MS and BS students join for a semester or summer internship.

        As part of the job, I coach student teams (4-7 people per team) as
        they learn to apply scrum methodology in their semester project - android
        application development.
        My advisors:

         - Prof. [Katerina Argyraki](https://people.epfl.ch/katerina.argyraki)
         - Prof. [George Candea](https://dslab.epfl.ch/people/candea/)

      #TODO: update if the Vigor gets published

    - role: Software Engineer Intern
      time: Jun - Aug 2015
      company: Google, Mountain View, CA USA
      details: |
        Added event tracking for network routing calculation.
        For the new Google datacenter network, in order to render performance more transparent
        in a distributed control plane, I implemented a logging and aggregate analytics system.

    - role: Software Engineer
      time: Mar - July 2014
      company: Samsung Research Institute, Moscow, Russia
      details: |
        Development of an [AOT](https://en.wikipedia.org/wiki/Ahead-of-time_compilation)
        of the [ECMAScript 5.0](https://en.wikipedia.org/wiki/ECMAScript#5th_Edition) (JavaScript) language, for the Samsung
        [Smart TV OS](https://en.wikipedia.org/wiki/Tizen).

    - role: Software Engineer
      time: Jul 2010 - Nov 2013
      company: Intel, Moscow, Russia
      details: |
        - Development of a performance-optimizing binary translator from x86 to a new architecture with fine-grained concurrency.
        - Development of a functional simulator for a new architecture with fine-grained concurrency.

    - role: Junior Researcher
      time: Summer 2012
      company: OJS Co. "Institute of Electronic Control Computers", Moscow, Russia
      details: |
        Participated in the development of a base model of prosthesis limbs.


projects:
    title: Selected Projects
    intro: >
      Here are some of my side and study projects. Visit my [GitHub](https://github.com/necto)
      page for more.
    assignments:
      - title: Vigor
        link: "https://vigor-nf.github.io"
        tagline: "An automatic formal verification framework for software [network functions](https://www.sdxcentral.com/term/network-function/)"

      - title: mipt-vis
        link: "https://github.com/mipt-ilab/mipt-vis"
        tagline: "A simple graph visualizer with automatic layout calculation implemented with [QT](https://www.qt.io/)"

      - title: Natty
        link: "https://github.com/necto/natty"
        tagline: "An online music-searching and listening service based on [GWT](http://www.gwtproject.org/)"

      - title: Runningram
        link: "https://code.google.com/archive/p/runningram/"
        tagline: >
          Started as a second-year class project, a 2d isometric arcade game based on SDL.
          It is based on a home-grown 2d physics engine with developed collision detection algorithm,
          fairly solid body model for the cars and non-isotropic damage model.
          The game supports scripting in [ECL](https://common-lisp.net/project/ecl/), including bots,
          and multiplayer on the same-keyboard and across the network.

      - title: A 3D tank shooter
        link: "#"
        tagline: >
          As a side project during my school years,
          I enjoyed playing with 3d graphic rendering using open GL,
          and simulating solid body dynamics based on the first principles.
          The result was a tank-duel game with customizable terrain realistic physics
          with a home-grown game engine.

publications:
    title: Publications
    intro: |
      For more details on the publications I invite you to visit my
      [Google Scholar](https://scholar.google.ch/citations?user=h7fTsTQAAAAJ) page.

    papers:
      - title: "Verifying Software Network Functions with No Verification Expertise"
        pdf: https://vigor-nf.github.io/vigor-paper.pdf
        code: https://github.com/vigor-nf/vigor
        link: https://vigor-nf.github.io/
        conflink: https://sosp19.rcs.uwaterloo.ca/program.html
        authors: <u>Arseniy Zaostrovnykh</u>, Solal Pirelli, Rishabh Iyer, Matteo Rizzo, Luis Pedrosa, Katerina Argyraki, George Candea
        conference: "ACM SOSP"
        year: 2019
        abstract: |
          We present the design and implementation of Vigor,
          a software stack and toolchain for building and running software network middleboxes
          that are guaranteed to be correct,
          while preserving competitive performance and developer productivity.

          Developers write the core of the middlebox - the network function (NF) - in C,
          on top of a standard packet-processing framework,
          putting persistent state in data structures from Vigor's library;
          the Vigor toolchain then automatically verifies that the resulting software stack
          correctly implements a specification, which is written in Python.

          Vigor has three key features: network function developers need no verification expertise,
          and the verification process does not require their assistance (<i>push-button</i> verification);
          the entire software stack is verified, down to the hardware (<i>full-stack</i> verification); 
          and verification can be done in a <i>pay-as-you-go</i> manner, 
          i.e., instead of investing upfront a lot of time in writing and verifying a complete specification, 
          one can specify one-off properties in a few lines of Python and verify them without concern for the rest.

          We developed five representative NFs - a NAT, a Maglev load balancer,
          a MAC-learning bridge, a firewall, and a traffic policer -
          and verified with Vigor that they satisfy standards-derived specifications,
          are memory-safe, and do not crash or hang.
          We show that they provide competitive performance.

      - title: "Performance Contracts for Software Network Functions"
        pdf: assets/documents/bolt.pdf
        slides: assets/documents/bolt-slides.pdf
        video: https://www.youtube.com/watch?v=cV8pCGiTxgQ
        code: https://github.com/bolt-perf-contracts/bolt
        poster: assets/documents/bolt-poster.png
        conflink: https://www.usenix.org/conference/nsdi19/technical-sessions
        link: https://bolt-perf-contracts.github.io/
        authors: Rishabh Iyer, Luis Pedrosa, <u>Arseniy Zaostrovnykh</u>, Solal Pirelli, Katerina Argyraki, George Candea
        conference: "USENIX NSDI"
        year: 2019
        abstract: |
          Software network functions (NFs), or milddleboxes,
          promise flexibility and easy deployment of network services,
          but face the serious challenge of unexpected performance behaviour.
          We propose the notion of a _performance contract_,
          a construct formulated in terms of _performance critical variables_,
          that provides a precise description of NF performance.
          Performance contracts enable fine-grained prediction and scrutiny of NF performance for arbitrary workloads,
          without having to run the NF itself.

          We describe Bolt, a technique and tool for computing such performance contracts for the entire software stack of NFs written in C,
          including the core NF logic, DPDK packet processing framework, and NIC driver.
          Bolt takes as input the NF implementation code and outputs the corresponding contract.
          Under the covers, it combines pre-analysis of a library of stateful NF data structures with automated symbolic execution of the NF's code.
          We evaluate Bolt on four NFs - a Maglev-like load balancer,
          a NAT, an LPM router, and a MAC bridge -
          and show that its performance contracts predict the dynamic instruction count and memory access count with a maximum gap of 7% between the real execution and the conservatively predicted upper bound.
          With further engineering, this gap can drop to 0.

      - title: "Automated Synthesis of Adversarial Workloads for Network Functions"
        pdf: assets/documents/castan.pdf
        slides: assets/documents/castan-slides.pdf
        video: https://pedrosa.2y.net/Publications/castan-sigcomm-talk.mp4
        code: https://github.com/nal-epfl/castan
        poster: assets/documents/castan-poster.png
        conflink: http://conferences.sigcomm.org/sigcomm/2018/program.html
        link: https://pedrosa.2y.net/Projects/CASTAN
        authors: Luis Pedrosa, Rishabh Iyer, <u>Arseniy Zaostrovnykh</u>, Jonas Fietz, Katerina Argyraki
        conference: "ACM SIGCOMM"
        year: 2018
        abstract: |
          Software network functions promise to simplify the deployment of network services and reduce network operation cost. However,
          they face the challenge of unpredictable performance.
          Given this performance variability,
          it is imperative that during deployment,
          network operators consider the performance of the NF not only for typical but also adversarial workloads.
          
          We contribute a tool that helps solve this challenge:
          it takes as input the LLVM code of a network function and outputs packet sequences that trigger slow execution paths.
          Under the covers,
          it combines directed symbolic execution with a sophisticated cache model to look for execution paths that incur many CPU cycles and involve adversarial memory-access patterns.
          We used our tool on 11 network functions that implement a variety of data structures and discovered workloads that can in some cases triple latency and cut throughput by 19% relative to typical testing workloads.

      - title: "A Formally Verified NAT Stack"
        pdf: assets/documents/formally-verified-nat-stack.pdf
        slides: assets/documents/formally-verified-nat-stack-slides.pptx
        video: https://www.youtube.com/watch?v=esfwD46f2ZI&feature=youtu.be
        code: https://github.com/vignat/vignat/tree/kbnets18
        poster: assets/documents/VigNATStack-EDICOH18-poster.pdf
        conflink: http://conferences.sigcomm.org/sigcomm/2018/workshop-kbnets.html
        link: https://vignat.github.io
        authors: Solal Pirelli, <u>Arseniy Zaostrovnykh</u>, George Candea
        conference: "ACM SIGCOMM, KBNets (<b>Best Paper Award</b>)"
        year: 2018
        abstract: |
          Prior  work  proved  a  stateful  NAT  network  function  to  be semantically  correct,
          crash-free,  and memory  safe [[29]](https://vignat.github.io).
          Their toolchain  verifies the  network  function  code  while  assuming the  underlying  kernel-bypass  framework,
          drivers,  operating system, and hardware to be correct.
          We extend the toolchain to verify  the  kernel-bypass  framework  and  a  NIC  driver  in  the context of the NAT.
          We uncover bugs in both the framework and the driver.

      - title: "A Formally Verified NAT"
        pdf: https://vignat.github.io/vignat-paper.pdf
        slides: assets/documents/vignat-slides.pdf
        video: https://pedrosa.2y.net/Publications/vignat.mp4
        code: https://github.com/vignat/vignat
        poster: assets/documents/Vigor-EDICOH19-poster.pdf
        conflink: http://conferences.sigcomm.org/sigcomm/2017/program.html
        link: https://vignat.github.io
        authors: <u>Arseniy Zaostrovnykh</u>, Solal Pirelli, Luis Pedrosa, Katerina Argyraki, George Candea
        conference: "ACM SIGCOMM"
        year: 2017
        abstract: |
          We present a Network Address Translator (NAT) written in C and proven to be semantically correct according to RFC 3022, as well as crash-free and memory-safe.
          There exists a lot of recent work on network verification,
          but it mostly assumes models of network functions and proves properties specific to network configuration, such as reachability and absence of loops.

          Our proof applies directly to the C code of a network function,
          and it demonstrates the absence of implementation bugs.
          Prior work argued that this is not feasible
          (i.e., that verifying a real, stateful network function written in C does not scale) but we demonstrate otherwise:
          NAT is one of the most popular network functions and maintains per-flow state that needs to be properly updated and expired,
          which is a typical source of verification challenges.
          We tackle the scalability challenge with a new combination of symbolic execution and proof checking using separation logic;
          this combination matches well the typical structure of a network function.
          We then demonstrate that formally proven correctness in this case does not come at the cost of performance

skills:
    title: Skills &amp; Proficiency

    toolset:
      - name: C
        level: 98%

      - name: OCaml
        level: 95%

      - name: Scrum
        level: 90%

      - name: C++
        level: 80%

      - name: Java/Android
        level: 70%

      - name: Emacs
        level: 6%

      - name: Vi
        level: 5%

bio:
  title: Biography
  summary: |
    Arseniy Zaostrovnykh is a fifth-year PhD student at [Network Architecture Laboratory](https://nal.epfl.ch)
    and [Dependable System Laboratory](https://dslab.epfl.ch)
    at the École polytechnique fédérale de Lausanne ([EPFL](https://epfl.ch)),
    working under the supervision of Prof. [Katerina Argyraki](https://people.epfl.ch/katerina.argyraki) and
    Prof. [George Candea](https://dslab.epfl.ch/people/candea/).
    He is interested in dependability of computer systems, formal methods,
    working on how to make formal methods practical.
    Arseniy earned his MSc(2014) and BSc(2012) in [Moscow Institute of Physics and Technology](https://mipt.ru/english/).
    He has interned at Intel and Google, and worked as a software Engineer at
    the [Samsung Research Institute (SRI)](https://research.samsung.com/srr) and Intel and as a junior researcher
    at the [Institute of Electronic Control Computers](http://www.ineum.ru/) in Moscow.

footer: >
    Designed with <i class="fas fa-heart"></i> by <a href="http://themes.3rdwavemedia.com" target="_blank" rel="nofollow">Xiaoying Riley</a>
